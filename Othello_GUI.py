import pointimport Othello_Logicimport tkinterDEFAULT_FONT = ('Helvetica', 20)class DialogBox:    def __init__(self):        '''initialises all values for the dialog box'''        self._dialog_box = tkinter.Toplevel()        self.start_clicked = False        row_label = tkinter.Label(master = self._dialog_box, text = 'ROWS:', font = DEFAULT_FONT)        row_label.grid(row = 0, column = 0, padx = 10, pady = 10, sticky = tkinter.W)        self.rownumber = tkinter.IntVar(self._dialog_box)        self.rownumber.set(4)        self._rowmenu = tkinter.OptionMenu(self._dialog_box, self.rownumber, 4, 6, 8, 10, 12, 14, 16)        self._rowmenu.grid(row = 0, column = 1, padx = 10, pady = 10, sticky = tkinter.E)            col_label = tkinter.Label(master = self._dialog_box, text = 'COLUMNS:', font = DEFAULT_FONT)        col_label.grid(row = 1, column = 0, padx = 10, pady = 10, sticky = tkinter.W)        self.colnumber = tkinter.IntVar(self._dialog_box)        self.colnumber.set(4)        self._colmenu = tkinter.OptionMenu(self._dialog_box, self.colnumber,4, 6, 8, 10, 12, 14, 16)        self._colmenu.grid(row = 1, column = 1, padx = 10, pady = 10,sticky = tkinter.E)                start_label = tkinter.Label(master = self._dialog_box, text = 'FIRST TURN:', font = DEFAULT_FONT)        start_label.grid(row = 2, column = 0, padx = 10, pady = 10, sticky = tkinter.W)        self.start_turn = tkinter.StringVar(self._dialog_box)        self.start_turn.set('White')        self._start_menu = tkinter.OptionMenu(self._dialog_box, self.start_turn, 'Black', 'White')        self._start_menu.grid(row = 2, column = 1, padx = 10, pady = 10, sticky = tkinter.E)        gametype_label = tkinter.Label(master = self._dialog_box, text = 'WIN CONDITION:', font = DEFAULT_FONT)        gametype_label.grid(row = 3, column = 0, padx = 10, pady = 10, sticky = tkinter.W)        self.gametype_entry = tkinter.StringVar(self._dialog_box)        self.gametype_entry.set('>')        self._gametype_menu = tkinter.OptionMenu(self._dialog_box, self.gametype_entry, '>', '<')        self._gametype_menu.grid(row = 3, column = 1, padx = 10, pady = 10, sticky = tkinter.E)        self._startbutton = tkinter.Button(master = self._dialog_box, text = 'START GAME',                                           font = DEFAULT_FONT, command = self.startbutton_clicked)        self._startbutton.grid(row = 4, column = 0, padx = 10, pady = 10, sticky = tkinter.W)        self._dialog_box.rowconfigure(0, weight = 1)        self._dialog_box.rowconfigure(1, weight = 1)        self._dialog_box.rowconfigure(2, weight = 1)        self._dialog_box.rowconfigure(3, weight = 1)        self._dialog_box.rowconfigure(4, weight = 1)        self._dialog_box.columnconfigure(0, weight = 1)        self._dialog_box.columnconfigure(1, weight = 1)    def startbutton_clicked(self):        '''checks if values have been submitted and assigns then to respective variables'''        self.start_clicked = True        self.rownum = self.rownumber.get()        self.colnum = self.colnumber.get()        if self.start_turn == 'White':            self.turn = 'W'        else:            self.turn = 'B'        self.gametype = self.gametype_entry.get()        self._dialog_box.destroy()            def show(self):        '''opens up the Dialog window'''        self._dialog_box.grab_set()        self._dialog_box.wait_window()class Cell:    def __init__(self, x1: float, y1: float, x2: float, y2: float, width: float, height: float, row: int, col: int):        '''initialises all values for the cell'''        self.x1 = x1        self.y1 = y1        self.x2 = x2        self.y2 = y2        self.disc = None                self.start_coordinates = point.from_pixel(x1, y1, width, height)        self.end_coordinates = point.from_pixel(x2, y2, width, height)        self.row = row        self.col = col        self.occupied = 'NONE'    def get_start_coordinates(self) -> tuple:        '''Returns the top strart point of the cell in frac form as a tuple'''        return self.start_coordinates.frac()    def get_end_coordinates(self) -> tuple:        '''Returns the end point point of the cell in frac form as a tuple'''        return self.end_coordinates.frac()            def contains_point(self, p: point.Point) -> bool:        '''Checks if the point is in the given cell'''        if p._frac_x > self.start_coordinates._frac_x and p._frac_x < self.end_coordinates._frac_x and p._frac_y > self.start_coordinates._frac_y and p._frac_y < self.end_coordinates._frac_y:            return True        else:            return False        class OthelloApp:    def __init__(self):        '''Initializes the othello application values'''        self._root = tkinter.Tk()        self._root.rowconfigure(1, weight = 1)        self._root.rowconfigure(0, weight = 1)        self._root.columnconfigure(0, weight = 0)        self._root.columnconfigure(1, weight = 1)        self._root.columnconfigure(2, weight = 1)                self.rows = 0        self.columns = 0        self.cell_list = []        self.gamemode = 'Initial'        self.initial_gameboard = []        self._canvas = tkinter.Canvas(master = self._root, width = 600, height = 600,                                      background = '#D2691E')                self._canvas.grid(row = 2, column = 0, columnspan = 3, padx = 10, pady = 10,                          sticky = tkinter.N + tkinter.S + tkinter.E + tkinter.W)                self._startbutton = tkinter.Button(master = self._root, text = 'PLACE INITIAL DISCS',                                           font = DEFAULT_FONT, command = self.start_clicked)        self._startbutton.grid(row = 1, column = 1, padx = 10, pady = 10, sticky = tkinter.E)        self._done = tkinter.Button(master = self._root, text = 'Done', font = DEFAULT_FONT, command = self.place_black_discs)                self._black_label = tkinter.Label(master = self._root, text = 'PLACE BLACK', font = DEFAULT_FONT)        self._white_label = tkinter.Label(master = self._root, text = 'PLACE WHITE', font = DEFAULT_FONT)        self._begin = tkinter.Button(master = self._root, text = 'Start Game', font = DEFAULT_FONT, command = self.place_white_discs)        self.turn_display = tkinter.StringVar(self._root)        self.turn_display.set('')        self._turn_label = tkinter.Label(master = self._root, textvariable = self.turn_display, font = DEFAULT_FONT)        self.ruleset = tkinter.Label(master = self._root, text = 'FULL', font = DEFAULT_FONT)        self.ruleset.grid(row = 0, column = 2, padx = 10, pady = 10, sticky = tkinter.E)        self.score = tkinter.StringVar(self._root)        self.score.set('')        self._score_label = tkinter.Label(master = self._root, textvariable = self.score, font = DEFAULT_FONT)        self._score_label.grid(row = 0, column = 0, columnspan = 2, padx = 10)          self._canvas.bind('<Configure>', self.on_canvas_resized)        self._canvas.bind('<Button-1>', self.on_canvas_clicked)            def start_clicked(self):        '''Opens the dialog box and takes input from user'''        box = DialogBox()        box.show()        if box.start_clicked:            self.rows = box.rownum            self.columns = box.colnum            self.turn = box.turn            self.gametype = box.gametype            self.draw_grid()            self.create_cell_list()            self._startbutton.destroy()            self.gamemode = 'Initial Black'            self._done.grid(row = 1, column = 2, padx = 10, pady = 10, sticky = tkinter.E)            self._black_label.grid(row = 1, column = 1, padx = 10)    def place_black_discs(self):        '''Allows user to place black discs'''        self._black_label.destroy()        self._white_label.grid(row = 1, column = 1, padx = 10)        self.gamemode = 'Initial White'        self._done.destroy()        self._begin.grid(row = 1, column = 2, padx = 10, pady = 10, sticky = tkinter.E)    def place_white_discs(self):        '''Allows user to place white discs and initialises the gameboard'''        self.gamemode = 'Ingame'        self._begin.destroy()        self.create_gameboard_list()        self._white_label.destroy()        self.turn_display.set("{}'s turn".format(self.turn.upper()))        self._turn_label.grid(row = 1, column = 1, padx = 10, pady = 10)        self.start_game()        if Othello_Logic.check_gameover(self.gamestate.turn, self.gamestate.gameboard):            self.gameover()        else:                self.update_display_labels()    def create_cell_list(self):        '''Creates a list of all of the cells on the board'''        canvas_width = self._canvas.winfo_width()        canvas_height = self._canvas.winfo_height()        for x in range(self.rows):            for y in range(self.columns):                self.cell_list.append(Cell(y*(canvas_width/self.columns), x*(canvas_height/self.rows), (y+1)*(canvas_width/self.columns), (x+1)*(canvas_height/self.rows), canvas_width, canvas_height, x, y))    def create_gameboard_list(self):        '''Creates a list of lists that holds the initial gameboard'''        for x in range(self.rows):            rowlist = []            for y in range(self.columns):                for cell in self.cell_list:                    if cell.row == x:                        if cell.col == y:                            if cell.occupied == 'black':                                rowlist.append('B')                            if cell.occupied == 'white':                                rowlist.append('W')                            if cell.occupied == 'NONE':                                rowlist.append('.')            self.initial_gameboard.append(rowlist)    def draw_grid(self):        '''Draws the board grid on the canvas'''        self._canvas.delete(tkinter.ALL)        canvas_width = self._canvas.winfo_width()        canvas_height = self._canvas.winfo_height()        for x in range(self.rows):            for y in range(self.columns):                self._canvas.create_rectangle(y*(canvas_width/self.columns), x*(canvas_height/self.rows), (y+1)*(canvas_width/self.columns), (x+1)*(canvas_height/self.rows), outline = 'black')    def draw_disc(self, cell: Cell):        '''Draws a disc in the given cell'''        canvas_width = self._canvas.winfo_width()        canvas_height = self._canvas.winfo_height()        x1 = cell.get_start_coordinates()[0] * canvas_width        y1 = cell.get_start_coordinates()[1] * canvas_height        x2 = cell.get_end_coordinates()[0] * canvas_width        y2 = cell.get_end_coordinates()[1] * canvas_height        cell.disc = self._canvas.create_oval(x1, y1, x2, y2, fill = cell.occupied)    def erase_disc(self, cell: Cell):        '''Erases the disc in the given cell'''        self._canvas.delete(cell.disc)            def redraw_all_discs(self):        '''Redraws all of the discs on the board'''        for cell in self.cell_list:            if cell.occupied != 'NONE':                self.draw_disc(cell)        def on_canvas_resized(self, event: tkinter.Event):        '''Resizes the grid appropriately'''        self.draw_grid()        self.redraw_all_discs()    def on_canvas_clicked(self, event: tkinter.Event):        '''updates the gameboard every time there is a legal mouse click'''        canvas_width = self._canvas.winfo_width()        canvas_height = self._canvas.winfo_height()        mouse_click = point.from_pixel(event.x, event.y, canvas_width, canvas_height)                if self.gamemode == 'Initial Black':            for cell in self.cell_list:                if cell.contains_point(mouse_click) and cell.occupied == 'NONE':                    cell.occupied = 'black'                    self.draw_disc(cell)                elif cell.contains_point(mouse_click) and cell.occupied == 'black':                    cell.occupied = 'NONE'                    self.erase_disc(cell)                            elif self.gamemode == 'Initial White':            for cell in self.cell_list:                if cell.contains_point(mouse_click) and cell.occupied == 'NONE':                    cell.occupied = 'white'                    self.draw_disc(cell)                elif cell.contains_point(mouse_click) and cell.occupied == 'white':                    cell.occupied = 'NONE'                    self.erase_disc(cell)                            elif self.gamemode == 'Ingame':            if Othello_Logic.check_gameover(self.gamestate.turn, self.gamestate.gameboard) == False:                if Othello_Logic.valid_moves_left(self.gamestate.turn, self.gamestate.gameboard):                    for cell in self.cell_list:                        if cell.contains_point(mouse_click):                            check, move_direction = Othello_Logic.check_valid_move(cell.row, cell.col, self.gamestate.turn, self.gamestate.gameboard)                            if check == 1:                                if self.gamestate.turn == 'B':                                    cell.occupied = 'black'                                else:                                    cell.occupied = 'white'                                self.draw_disc(cell)                                Othello_Logic.make_move(cell.row, cell.col, self.gamestate.turn, self.gamestate.gameboard, move_direction)                                if Othello_Logic.check_gameover(self.gamestate.turn, self.gamestate.gameboard):                                    self.gamemode = "GameOver"                                self.gamestate.turn = Othello_Logic.changeturn(self.gamestate.turn)                                self.update_display()                                if Othello_Logic.valid_moves_left(self.gamestate.turn, self.gamestate.gameboard) == False:                                    self.gamestate.turn = Othello_Logic.changeturn(self.gamestate.turn)                                    self.update_display()                                                    else:                    self.gamestate.turn = Othello_Logic.changeturn(self.gamestate.turn)                    self.update_display()            else:                self.gameover()    def update_display(self):        '''Updates the displayed board and labels'''        for x in range(self.gamestate.totalrows):            for y in range(self.gamestate.totalcolumns):                for cell in self.cell_list:                    if cell.row == x and cell.col == y:                        if self.gamestate.gameboard[x][y] == 'B':                            cell.occupied = 'black'                        elif self.gamestate.gameboard[x][y] == 'W':                            cell.occupied = 'white'        self.redraw_all_discs()        self.update_display_labels()    def update_display_labels(self):        '''Updates all labels on the board'''        if self.gamemode == 'Ingame':                      if self.gamestate.turn == 'W':                self.turn_display.set("WHITE's turn")            else:                self.turn_display.set("BLACK's turn")        elif self.gamemode == 'GameOver':            self.gameover()        self.blackdiscs, self.whitediscs = Othello_Logic.countdiscs(self.gamestate.gameboard)                        self.score.set('BLACK: {}  WHITE: {}'.format(self.blackdiscs, self.whitediscs))            def gameover(self):        '''Ends the ongoing game and displays winner'''        if self.gametype == '>':            if self.blackdiscs > self.whitediscs:                winner = "BLACK"            elif self.blackdiscs < self.whitediscs:                winner = "WHITE"            else:                winner = "NONE"        elif self.gametype == '<':            if self.blackdiscs > self.whitediscs:                winner = "WHITE"            elif self.blackdiscs < self.whitediscs:                winner = "BLACK"            else:                winner = "NONE"        self.turn_display.set('WINNER: ' + winner)    def start_game(self):        '''Creates the gamestate'''        if self.turn == 'Black':            turn = 'B'        else:            turn = 'W'                    self.gamestate = Othello_Logic.Othello(self.rows, self.columns, self.turn, self.gametype, self.initial_gameboard)    def run(self):        '''Runs the gui'''        self._root.mainloop()if __name__ == '__main__':    OthelloApp().run()